@page "/article/{normalizedName}"
@using Waffle.Core.Constants;
@using Waffle.Extensions;
@using Waffle.Models.Components
@using Waffle.Models.Components.Specifications
@using Waffle.ViewComponents
@using Waffle.Entities
@model Waffle.Pages.Articles.DetailsModel

<main class="wf-article__detail pt-4">
    <div class="container">
        <div class="row">
            <div class="col-md-8">

                <h1 class="title">@Model.PageData.Name</h1>
                <div class="mb-4 bg-white post-body">
                    @foreach (var item in Model.Works)
                    {
                        @await Component.InvokeAsync(item.NormalizedName, item.Id)
                    }

                    @if (Model.HasTag)
                    {
                        <div class="wf-delimiter"></div>
                        <div class="mb-4">
                            <i class="fas fa-tag me-2"></i>
                            @foreach (var item in Model.Tags)
                            {
                                <a href="/tag/@item.NormalizedName" class="bg-gray-100 px-2 py-1 inline-block rounded tag-item">@item.Name</a>
                            }

                        </div>
                    }

                    <div class="bg-gray-100 px-4 py-2 flex justify-between items-center text-muted text-sm">
                        <div class="flex gap-4">
                            <span>
                                <i class="fas fa-eye me-1"></i>
                                <span>@Model.PageData.ViewCount.ToNumber()</span>
                            </span>
                            <span>|</span>
                            <span>
                                <i class="fas fa-calendar me-1"></i>
                                <span>@Model.PageData.ModifiedDate</span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                @await Component.InvokeAsync(nameof(ArticleSpotlight))

            </div>
        </div>

        @if (Model.Tags.Any())
        {
            @await Component.InvokeAsync(ComponentName.Related, Model.Tags.Select(x => x.Id))
        }
    </div>
</main>